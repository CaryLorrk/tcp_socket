// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: comm.proto

#include "comm.pb.h"
#include "comm.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpc {

static const char* Comm_method_names[] = {
  "/rpc.Comm/CheckAlive",
  "/rpc.Comm/Cmd",
  "/rpc.Comm/Finish",
};

std::unique_ptr< Comm::Stub> Comm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Comm::Stub> stub(new Comm::Stub(channel));
  return stub;
}

Comm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckAlive_(Comm_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cmd_(Comm_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Finish_(Comm_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Comm::Stub::CheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::rpc::CheckAliveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckAlive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>* Comm::Stub::AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::CheckAliveResponse>::Create(channel_.get(), cq, rpcmethod_CheckAlive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>* Comm::Stub::PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::CheckAliveResponse>::Create(channel_.get(), cq, rpcmethod_CheckAlive_, context, request, false);
}

::grpc::ClientReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* Comm::Stub::CmdRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rpc::CmdRequest, ::rpc::CmdResponse>::Create(channel_.get(), rpcmethod_Cmd_, context);
}

::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* Comm::Stub::AsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpc::CmdRequest, ::rpc::CmdResponse>::Create(channel_.get(), cq, rpcmethod_Cmd_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* Comm::Stub::PrepareAsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpc::CmdRequest, ::rpc::CmdResponse>::Create(channel_.get(), cq, rpcmethod_Cmd_, context, false, nullptr);
}

::grpc::Status Comm::Stub::Finish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::rpc::FinishResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Finish_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>* Comm::Stub::AsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::FinishResponse>::Create(channel_.get(), cq, rpcmethod_Finish_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>* Comm::Stub::PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rpc::FinishResponse>::Create(channel_.get(), cq, rpcmethod_Finish_, context, request, false);
}

Comm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comm::Service, ::rpc::CheckAliveRequest, ::rpc::CheckAliveResponse>(
          std::mem_fn(&Comm::Service::CheckAlive), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comm_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Comm::Service, ::rpc::CmdRequest, ::rpc::CmdResponse>(
          std::mem_fn(&Comm::Service::Cmd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comm::Service, ::rpc::FinishRequest, ::rpc::FinishResponse>(
          std::mem_fn(&Comm::Service::Finish), this)));
}

Comm::Service::~Service() {
}

::grpc::Status Comm::Service::CheckAlive(::grpc::ServerContext* context, const ::rpc::CheckAliveRequest* request, ::rpc::CheckAliveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comm::Service::Cmd(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpc::CmdResponse, ::rpc::CmdRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comm::Service::Finish(::grpc::ServerContext* context, const ::rpc::FinishRequest* request, ::rpc::FinishResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

