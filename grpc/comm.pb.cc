// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace rpc {
class CheckAliveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckAliveRequest>
      _instance;
} _CheckAliveRequest_default_instance_;
class CheckAliveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckAliveResponse>
      _instance;
} _CheckAliveResponse_default_instance_;
class CmdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest>
      _instance;
} _CmdRequest_default_instance_;
class CmdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse>
      _instance;
} _CmdResponse_default_instance_;
class FinishRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishRequest>
      _instance;
} _FinishRequest_default_instance_;
class FinishResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishResponse>
      _instance;
} _FinishResponse_default_instance_;
}  // namespace rpc
namespace protobuf_comm_2eproto {
void InitDefaultsCheckAliveRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_CheckAliveRequest_default_instance_;
    new (ptr) ::rpc::CheckAliveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::CheckAliveRequest::InitAsDefaultInstance();
}

void InitDefaultsCheckAliveRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckAliveRequestImpl);
}

void InitDefaultsCheckAliveResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_CheckAliveResponse_default_instance_;
    new (ptr) ::rpc::CheckAliveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::CheckAliveResponse::InitAsDefaultInstance();
}

void InitDefaultsCheckAliveResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckAliveResponseImpl);
}

void InitDefaultsCmdRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_CmdRequest_default_instance_;
    new (ptr) ::rpc::CmdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::CmdRequest::InitAsDefaultInstance();
}

void InitDefaultsCmdRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCmdRequestImpl);
}

void InitDefaultsCmdResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_CmdResponse_default_instance_;
    new (ptr) ::rpc::CmdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::CmdResponse::InitAsDefaultInstance();
}

void InitDefaultsCmdResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCmdResponseImpl);
}

void InitDefaultsFinishRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_FinishRequest_default_instance_;
    new (ptr) ::rpc::FinishRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::FinishRequest::InitAsDefaultInstance();
}

void InitDefaultsFinishRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFinishRequestImpl);
}

void InitDefaultsFinishResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::rpc::_FinishResponse_default_instance_;
    new (ptr) ::rpc::FinishResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::FinishResponse::InitAsDefaultInstance();
}

void InitDefaultsFinishResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFinishResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CheckAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CheckAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CheckAliveResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CmdRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::CmdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::FinishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rpc::FinishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rpc::CheckAliveRequest)},
  { 5, -1, sizeof(::rpc::CheckAliveResponse)},
  { 11, -1, sizeof(::rpc::CmdRequest)},
  { 17, -1, sizeof(::rpc::CmdResponse)},
  { 22, -1, sizeof(::rpc::FinishRequest)},
  { 27, -1, sizeof(::rpc::FinishResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_CheckAliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_CheckAliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_CmdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_CmdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_FinishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpc::_FinishResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "comm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncomm.proto\022\003rpc\"\023\n\021CheckAliveRequest\"$"
      "\n\022CheckAliveResponse\022\016\n\006status\030\001 \001(\010\"\032\n\n"
      "CmdRequest\022\014\n\004data\030\001 \001(\014\"\r\n\013CmdResponse\""
      "\017\n\rFinishRequest\"\020\n\016FinishResponse2\254\001\n\004C"
      "omm\022\?\n\nCheckAlive\022\026.rpc.CheckAliveReques"
      "t\032\027.rpc.CheckAliveResponse\"\000\022.\n\003Cmd\022\017.rp"
      "c.CmdRequest\032\020.rpc.CmdResponse\"\000(\0010\001\0223\n\006"
      "Finish\022\022.rpc.FinishRequest\032\023.rpc.FinishR"
      "esponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_comm_2eproto
namespace rpc {

// ===================================================================

void CheckAliveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAliveRequest::CheckAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCheckAliveRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckAliveRequest)
}
CheckAliveRequest::CheckAliveRequest(const CheckAliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.CheckAliveRequest)
}

void CheckAliveRequest::SharedCtor() {
  _cached_size_ = 0;
}

CheckAliveRequest::~CheckAliveRequest() {
  // @@protoc_insertion_point(destructor:rpc.CheckAliveRequest)
  SharedDtor();
}

void CheckAliveRequest::SharedDtor() {
}

void CheckAliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAliveRequest::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckAliveRequest& CheckAliveRequest::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCheckAliveRequest();
  return *internal_default_instance();
}

CheckAliveRequest* CheckAliveRequest::New(::google::protobuf::Arena* arena) const {
  CheckAliveRequest* n = new CheckAliveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.CheckAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CheckAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckAliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckAliveRequest)
  return false;
#undef DO_
}

void CheckAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckAliveRequest)
}

::google::protobuf::uint8* CheckAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckAliveRequest)
  return target;
}

size_t CheckAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.CheckAliveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.CheckAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAliveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.CheckAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.CheckAliveRequest)
    MergeFrom(*source);
  }
}

void CheckAliveRequest::MergeFrom(const CheckAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.CheckAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.CheckAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAliveRequest::CopyFrom(const CheckAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.CheckAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAliveRequest::IsInitialized() const {
  return true;
}

void CheckAliveRequest::Swap(CheckAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAliveRequest::InternalSwap(CheckAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAliveRequest::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckAliveResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAliveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAliveResponse::CheckAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCheckAliveResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckAliveResponse)
}
CheckAliveResponse::CheckAliveResponse(const CheckAliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:rpc.CheckAliveResponse)
}

void CheckAliveResponse::SharedCtor() {
  status_ = false;
  _cached_size_ = 0;
}

CheckAliveResponse::~CheckAliveResponse() {
  // @@protoc_insertion_point(destructor:rpc.CheckAliveResponse)
  SharedDtor();
}

void CheckAliveResponse::SharedDtor() {
}

void CheckAliveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAliveResponse::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckAliveResponse& CheckAliveResponse::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCheckAliveResponse();
  return *internal_default_instance();
}

CheckAliveResponse* CheckAliveResponse::New(::google::protobuf::Arena* arena) const {
  CheckAliveResponse* n = new CheckAliveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.CheckAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear();
}

bool CheckAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckAliveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckAliveResponse)
  return false;
#undef DO_
}

void CheckAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckAliveResponse)
}

::google::protobuf::uint8* CheckAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckAliveResponse)
  return target;
}

size_t CheckAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.CheckAliveResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.CheckAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAliveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.CheckAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.CheckAliveResponse)
    MergeFrom(*source);
  }
}

void CheckAliveResponse::MergeFrom(const CheckAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.CheckAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CheckAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.CheckAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAliveResponse::CopyFrom(const CheckAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.CheckAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAliveResponse::IsInitialized() const {
  return true;
}

void CheckAliveResponse::Swap(CheckAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAliveResponse::InternalSwap(CheckAliveResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAliveResponse::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest::CmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCmdRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CmdRequest)
}
CmdRequest::CmdRequest(const CmdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc.CmdRequest)
}

void CmdRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CmdRequest::~CmdRequest() {
  // @@protoc_insertion_point(destructor:rpc.CmdRequest)
  SharedDtor();
}

void CmdRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest& CmdRequest::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCmdRequest();
  return *internal_default_instance();
}

CmdRequest* CmdRequest::New(::google::protobuf::Arena* arena) const {
  CmdRequest* n = new CmdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CmdRequest)
  return false;
#undef DO_
}

void CmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CmdRequest)
}

::google::protobuf::uint8* CmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CmdRequest)
  return target;
}

size_t CmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.CmdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.CmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.CmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.CmdRequest)
    MergeFrom(*source);
  }
}

void CmdRequest::MergeFrom(const CmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.CmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.CmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest::CopyFrom(const CmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.CmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest::IsInitialized() const {
  return true;
}

void CmdRequest::Swap(CmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest::InternalSwap(CmdRequest* other) {
  using std::swap;
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdRequest::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse::CmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsCmdResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CmdResponse)
}
CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.CmdResponse)
}

void CmdResponse::SharedCtor() {
  _cached_size_ = 0;
}

CmdResponse::~CmdResponse() {
  // @@protoc_insertion_point(destructor:rpc.CmdResponse)
  SharedDtor();
}

void CmdResponse::SharedDtor() {
}

void CmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse& CmdResponse::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsCmdResponse();
  return *internal_default_instance();
}

CmdResponse* CmdResponse::New(::google::protobuf::Arena* arena) const {
  CmdResponse* n = new CmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CmdResponse)
  return false;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CmdResponse)
}

::google::protobuf::uint8* CmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CmdResponse)
  return target;
}

size_t CmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.CmdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.CmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.CmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.CmdResponse)
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.CmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {
  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse::InternalSwap(CmdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishRequest::FinishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsFinishRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.FinishRequest)
}
FinishRequest::FinishRequest(const FinishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.FinishRequest)
}

void FinishRequest::SharedCtor() {
  _cached_size_ = 0;
}

FinishRequest::~FinishRequest() {
  // @@protoc_insertion_point(destructor:rpc.FinishRequest)
  SharedDtor();
}

void FinishRequest::SharedDtor() {
}

void FinishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishRequest::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishRequest& FinishRequest::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsFinishRequest();
  return *internal_default_instance();
}

FinishRequest* FinishRequest::New(::google::protobuf::Arena* arena) const {
  FinishRequest* n = new FinishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FinishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FinishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.FinishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.FinishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.FinishRequest)
  return false;
#undef DO_
}

void FinishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.FinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.FinishRequest)
}

::google::protobuf::uint8* FinishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FinishRequest)
  return target;
}

size_t FinishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FinishRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.FinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.FinishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.FinishRequest)
    MergeFrom(*source);
  }
}

void FinishRequest::MergeFrom(const FinishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.FinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishRequest::CopyFrom(const FinishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishRequest::IsInitialized() const {
  return true;
}

void FinishRequest::Swap(FinishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishRequest::InternalSwap(FinishRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FinishRequest::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishResponse::FinishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_comm_2eproto::InitDefaultsFinishResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.FinishResponse)
}
FinishResponse::FinishResponse(const FinishResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.FinishResponse)
}

void FinishResponse::SharedCtor() {
  _cached_size_ = 0;
}

FinishResponse::~FinishResponse() {
  // @@protoc_insertion_point(destructor:rpc.FinishResponse)
  SharedDtor();
}

void FinishResponse::SharedDtor() {
}

void FinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishResponse::descriptor() {
  ::protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishResponse& FinishResponse::default_instance() {
  ::protobuf_comm_2eproto::InitDefaultsFinishResponse();
  return *internal_default_instance();
}

FinishResponse* FinishResponse::New(::google::protobuf::Arena* arena) const {
  FinishResponse* n = new FinishResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FinishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.FinishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.FinishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.FinishResponse)
  return false;
#undef DO_
}

void FinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.FinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.FinishResponse)
}

::google::protobuf::uint8* FinishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FinishResponse)
  return target;
}

size_t FinishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FinishResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.FinishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.FinishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.FinishResponse)
    MergeFrom(*source);
  }
}

void FinishResponse::MergeFrom(const FinishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FinishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.FinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishResponse::CopyFrom(const FinishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishResponse::IsInitialized() const {
  return true;
}

void FinishResponse::Swap(FinishResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishResponse::InternalSwap(FinishResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FinishResponse::GetMetadata() const {
  protobuf_comm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc

// @@protoc_insertion_point(global_scope)
