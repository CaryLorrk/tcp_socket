// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_comm_2eproto__INCLUDED
#define PROTOBUF_comm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_comm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCheckAliveRequestImpl();
void InitDefaultsCheckAliveRequest();
void InitDefaultsCheckAliveResponseImpl();
void InitDefaultsCheckAliveResponse();
void InitDefaultsCmdRequestImpl();
void InitDefaultsCmdRequest();
void InitDefaultsCmdResponseImpl();
void InitDefaultsCmdResponse();
void InitDefaultsFinishRequestImpl();
void InitDefaultsFinishRequest();
void InitDefaultsFinishResponseImpl();
void InitDefaultsFinishResponse();
inline void InitDefaults() {
  InitDefaultsCheckAliveRequest();
  InitDefaultsCheckAliveResponse();
  InitDefaultsCmdRequest();
  InitDefaultsCmdResponse();
  InitDefaultsFinishRequest();
  InitDefaultsFinishResponse();
}
}  // namespace protobuf_comm_2eproto
namespace rpc {
class CheckAliveRequest;
class CheckAliveRequestDefaultTypeInternal;
extern CheckAliveRequestDefaultTypeInternal _CheckAliveRequest_default_instance_;
class CheckAliveResponse;
class CheckAliveResponseDefaultTypeInternal;
extern CheckAliveResponseDefaultTypeInternal _CheckAliveResponse_default_instance_;
class CmdRequest;
class CmdRequestDefaultTypeInternal;
extern CmdRequestDefaultTypeInternal _CmdRequest_default_instance_;
class CmdResponse;
class CmdResponseDefaultTypeInternal;
extern CmdResponseDefaultTypeInternal _CmdResponse_default_instance_;
class FinishRequest;
class FinishRequestDefaultTypeInternal;
extern FinishRequestDefaultTypeInternal _FinishRequest_default_instance_;
class FinishResponse;
class FinishResponseDefaultTypeInternal;
extern FinishResponseDefaultTypeInternal _FinishResponse_default_instance_;
}  // namespace rpc
namespace rpc {

// ===================================================================

class CheckAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CheckAliveRequest) */ {
 public:
  CheckAliveRequest();
  virtual ~CheckAliveRequest();

  CheckAliveRequest(const CheckAliveRequest& from);

  inline CheckAliveRequest& operator=(const CheckAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckAliveRequest(CheckAliveRequest&& from) noexcept
    : CheckAliveRequest() {
    *this = ::std::move(from);
  }

  inline CheckAliveRequest& operator=(CheckAliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAliveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAliveRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAliveRequest*>(
               &_CheckAliveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CheckAliveRequest* other);
  friend void swap(CheckAliveRequest& a, CheckAliveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAliveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckAliveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckAliveRequest& from);
  void MergeFrom(const CheckAliveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.CheckAliveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCheckAliveRequestImpl();
};
// -------------------------------------------------------------------

class CheckAliveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CheckAliveResponse) */ {
 public:
  CheckAliveResponse();
  virtual ~CheckAliveResponse();

  CheckAliveResponse(const CheckAliveResponse& from);

  inline CheckAliveResponse& operator=(const CheckAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckAliveResponse(CheckAliveResponse&& from) noexcept
    : CheckAliveResponse() {
    *this = ::std::move(from);
  }

  inline CheckAliveResponse& operator=(CheckAliveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAliveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAliveResponse* internal_default_instance() {
    return reinterpret_cast<const CheckAliveResponse*>(
               &_CheckAliveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CheckAliveResponse* other);
  friend void swap(CheckAliveResponse& a, CheckAliveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAliveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckAliveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckAliveResponse& from);
  void MergeFrom(const CheckAliveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckAliveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:rpc.CheckAliveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCheckAliveResponseImpl();
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CmdRequest) */ {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdRequest(CmdRequest&& from) noexcept
    : CmdRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest& operator=(CmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest*>(
               &_CmdRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CmdRequest* other);
  friend void swap(CmdRequest& a, CmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:rpc.CmdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCmdRequestImpl();
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CmdResponse) */ {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdResponse(CmdResponse&& from) noexcept
    : CmdResponse() {
    *this = ::std::move(from);
  }

  inline CmdResponse& operator=(CmdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdResponse* internal_default_instance() {
    return reinterpret_cast<const CmdResponse*>(
               &_CmdResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CmdResponse* other);
  friend void swap(CmdResponse& a, CmdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.CmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsCmdResponseImpl();
};
// -------------------------------------------------------------------

class FinishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.FinishRequest) */ {
 public:
  FinishRequest();
  virtual ~FinishRequest();

  FinishRequest(const FinishRequest& from);

  inline FinishRequest& operator=(const FinishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishRequest(FinishRequest&& from) noexcept
    : FinishRequest() {
    *this = ::std::move(from);
  }

  inline FinishRequest& operator=(FinishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishRequest* internal_default_instance() {
    return reinterpret_cast<const FinishRequest*>(
               &_FinishRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FinishRequest* other);
  friend void swap(FinishRequest& a, FinishRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FinishRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FinishRequest& from);
  void MergeFrom(const FinishRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FinishRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.FinishRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsFinishRequestImpl();
};
// -------------------------------------------------------------------

class FinishResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.FinishResponse) */ {
 public:
  FinishResponse();
  virtual ~FinishResponse();

  FinishResponse(const FinishResponse& from);

  inline FinishResponse& operator=(const FinishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishResponse(FinishResponse&& from) noexcept
    : FinishResponse() {
    *this = ::std::move(from);
  }

  inline FinishResponse& operator=(FinishResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishResponse* internal_default_instance() {
    return reinterpret_cast<const FinishResponse*>(
               &_FinishResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FinishResponse* other);
  friend void swap(FinishResponse& a, FinishResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FinishResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FinishResponse& from);
  void MergeFrom(const FinishResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FinishResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.FinishResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_comm_2eproto::TableStruct;
  friend void ::protobuf_comm_2eproto::InitDefaultsFinishResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckAliveRequest

// -------------------------------------------------------------------

// CheckAliveResponse

// bool status = 1;
inline void CheckAliveResponse::clear_status() {
  status_ = false;
}
inline bool CheckAliveResponse::status() const {
  // @@protoc_insertion_point(field_get:rpc.CheckAliveResponse.status)
  return status_;
}
inline void CheckAliveResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:rpc.CheckAliveResponse.status)
}

// -------------------------------------------------------------------

// CmdRequest

// bytes data = 1;
inline void CmdRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdRequest::data() const {
  // @@protoc_insertion_point(field_get:rpc.CmdRequest.data)
  return data_.GetNoArena();
}
inline void CmdRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.CmdRequest.data)
}
#if LANG_CXX11
inline void CmdRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.CmdRequest.data)
}
#endif
inline void CmdRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.CmdRequest.data)
}
inline void CmdRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.CmdRequest.data)
}
inline ::std::string* CmdRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:rpc.CmdRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdRequest::release_data() {
  // @@protoc_insertion_point(field_release:rpc.CmdRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:rpc.CmdRequest.data)
}

// -------------------------------------------------------------------

// CmdResponse

// -------------------------------------------------------------------

// FinishRequest

// -------------------------------------------------------------------

// FinishResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comm_2eproto__INCLUDED
