// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: comm.proto
#ifndef GRPC_comm_2eproto__INCLUDED
#define GRPC_comm_2eproto__INCLUDED

#include "comm.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rpc {

class Comm final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.Comm";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::rpc::CheckAliveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>> AsyncCheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>>(AsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>> PrepareAsyncCheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>>(PrepareAsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>> Cmd(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>>(CmdRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>> AsyncCmd(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>>(AsyncCmdRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>> PrepareAsyncCmd(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>>(PrepareAsyncCmdRaw(context, cq));
    }
    virtual ::grpc::Status Finish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::rpc::FinishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>> AsyncFinish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>>(PrepareAsyncFinishRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>* AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckAliveResponse>* PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>* CmdRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>* AsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rpc::CmdRequest, ::rpc::CmdResponse>* PrepareAsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>* AsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FinishResponse>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::rpc::CheckAliveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>> AsyncCheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>>(AsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>> PrepareAsyncCheckAlive(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>>(PrepareAsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>> Cmd(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>>(CmdRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>> AsyncCmd(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>>(AsyncCmdRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>> PrepareAsyncCmd(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>>(PrepareAsyncCmdRaw(context, cq));
    }
    ::grpc::Status Finish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::rpc::FinishResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>> AsyncFinish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>>(PrepareAsyncFinishRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>* AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CheckAliveResponse>* PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::rpc::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* CmdRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* AsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rpc::CmdRequest, ::rpc::CmdResponse>* PrepareAsyncCmdRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>* AsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FinishResponse>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::rpc::FinishRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckAlive_;
    const ::grpc::internal::RpcMethod rpcmethod_Cmd_;
    const ::grpc::internal::RpcMethod rpcmethod_Finish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CheckAlive(::grpc::ServerContext* context, const ::rpc::CheckAliveRequest* request, ::rpc::CheckAliveResponse* response);
    virtual ::grpc::Status Cmd(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpc::CmdResponse, ::rpc::CmdRequest>* stream);
    virtual ::grpc::Status Finish(::grpc::ServerContext* context, const ::rpc::FinishRequest* request, ::rpc::FinishResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckAlive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* context, const ::rpc::CheckAliveRequest* request, ::rpc::CheckAliveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckAlive(::grpc::ServerContext* context, ::rpc::CheckAliveRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::CheckAliveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Cmd() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Cmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cmd(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpc::CmdResponse, ::rpc::CmdRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCmd(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rpc::CmdResponse, ::rpc::CmdRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Finish() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* context, const ::rpc::FinishRequest* request, ::rpc::FinishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinish(::grpc::ServerContext* context, ::rpc::FinishRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::FinishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckAlive<WithAsyncMethod_Cmd<WithAsyncMethod_Finish<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckAlive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* context, const ::rpc::CheckAliveRequest* request, ::rpc::CheckAliveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Cmd() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Cmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cmd(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpc::CmdResponse, ::rpc::CmdRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Finish() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* context, const ::rpc::FinishRequest* request, ::rpc::FinishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckAlive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::CheckAliveRequest, ::rpc::CheckAliveResponse>(std::bind(&WithStreamedUnaryMethod_CheckAlive<BaseClass>::StreamedCheckAlive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* context, const ::rpc::CheckAliveRequest* request, ::rpc::CheckAliveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::CheckAliveRequest,::rpc::CheckAliveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Finish() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::FinishRequest, ::rpc::FinishResponse>(std::bind(&WithStreamedUnaryMethod_Finish<BaseClass>::StreamedFinish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Finish(::grpc::ServerContext* context, const ::rpc::FinishRequest* request, ::rpc::FinishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::FinishRequest,::rpc::FinishResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckAlive<WithStreamedUnaryMethod_Finish<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckAlive<WithStreamedUnaryMethod_Finish<Service > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_comm_2eproto__INCLUDED
